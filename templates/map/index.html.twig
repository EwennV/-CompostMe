{% extends 'base.html.twig' %}

{% block title %}Carte des Composteurs
{% endblock %}

{% block body %}
	<div class="container-fluid">
		<div class="row">
			<div class="col-md-3">
				<div class="filters">
					<h3 class="filters-title">Filtres</h3>
					<div id="filter-owner-type" class="filter-category">
						<h4 data-toggle="collapse" href="#ownerTypeFilters" role="button" aria-expanded="false" aria-controls="ownerTypeFilters">Type de propriété<i class="fa fa-plus" id="ownerTypeIcon"></i>
						</h4>
						<div class="collapse" id="ownerTypeFilters">
							{% for type in ownerTypes %}
								<div class="form-check">
									<input class="form-check-input" type="checkbox" value="{{ type.id }}" id="ownerType{{ type.id }}" name="ownerType">
									<label class="form-check-label" for="ownerType{{ type.id }}">
										{{ type.name }}
									</label>
								</div>
							{% endfor %}
						</div>
					</div>
					<div id="filter-access-type" class="filter-category">
						<h4 data-toggle="collapse" href="#accessTypeFilters" role="button" aria-expanded="false" aria-controls="accessTypeFilters">Type d'accès<i class="fa fa-plus" id="accessTypeIcon"></i>
						</h4>
						<div class="collapse" id="accessTypeFilters">
							{% for type in accessTypes %}
								<div class="form-check">
									<input class="form-check-input" type="checkbox" value="{{ type.id }}" id="accessType{{ type.id }}" name="accessType">
									<label class="form-check-label" for="accessType{{ type.id }}">
										{{ type.name }}
									</label>
								</div>
							{% endfor %}
						</div>
					</div>
					<div id="filter-fill-rate" class="filter-category">
						<h4 data-toggle="collapse" href="#fillRateFilters" role="button" aria-expanded="false" aria-controls="fillRateFilters">Taux de remplissage<i class="fa fa-plus" id="fillRateIcon"></i>
						</h4>
						<div class="collapse" id="fillRateFilters">
							{% for rate in fillRateTypes %}
								<div class="form-check">
									<input class="form-check-input" type="checkbox" value="{{ rate.id }}" id="fillRate{{ rate.id }}" name="fillRate">
									<label class="form-check-label" for="fillRate{{ rate.id }}">
										{{ rate.name }}
									</label>
								</div>
							{% endfor %}
						</div>
					</div>
					<div>
						<button id="applyFilters" class="btn btn-primary mt-3 w-100">Appliquer les filtres</button>
					</div>
					<div>
						<button id="resetFilters" class="btn btn-secondary mt-3 w-100">Réinitialiser les filtres</button>
					</div>
				</div>
			</div>

			<div class="col-md-5">
				<h3 class="composter-list-title">Liste des Composteurs</h3>
				<div
						class="list-group" id="composterList"><!-- Composteurs ajoutés par JavaScript -->
				</div>
			</div>

			<div class="col-md-4">
				<div id="mapid" style="height: 90vh;" class="mt-3"></div>
			</div>
		</div>
	</div>
	<script>
		document.addEventListener('DOMContentLoaded', function () {
			var greenIcon = new L.Icon({
				iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',
				shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
				iconSize: [
					25, 41
				],
				iconAnchor: [
					12, 41
				],
				popupAnchor: [
					1, -34
				],
				shadowSize: [41, 41]
			});

			var map = L.map('mapid').setView([
				44.864984495119764, -0.5782488698590921
			], 13);
			L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {attribution: '© OpenStreetMap contributors'}).addTo(map);

// Appel initial pour charger les données
			updateMap();

			document.getElementById('applyFilters').addEventListener('click', updateMap);

			document.getElementById('resetFilters').addEventListener('click', function () {
				document.querySelectorAll('.filter-checkbox').forEach(checkbox => {
					checkbox.checked = false;
				});
				updatesMap();
			});

			$(document).ready(function () {
				setupCollapseIcons();
			});

			function setupCollapseIcons() {
				$('.collapse').on('show.bs.collapse', function () {
					const icon = document.querySelector (`#${
							this.id.replace('Filters', 'Icon')
					}`);
					if (icon) {
						icon.classList.remove('fa-plus');
						icon.classList.add('fa-minus');
					}
				}).on('hide.bs.collapse', function () {
					const icon = document.querySelector (`#${
							this.id.replace('Filters', 'Icon')
					}`);
					if (icon) {
						icon.classList.remove('fa-minus');
						icon.classList.add('fa-plus');
					}
				});
			}


			function updateMap() {
				const ownerTypeIds = getSelectedFilterIds('ownerType');
				const accessTypeIds = getSelectedFilterIds('accessType');
				const fillRateIds = getSelectedFilterIds('fillRate');

				fetch(`/composter/filter?ownerType=${ownerTypeIds}&accessType=${accessTypeIds}&fillRate=${fillRateIds}`).then(response => {
					if (!response.ok)
						throw new Error('Network response was not ok');



					return response.json();
				}).then(data => {
					map.eachLayer(layer => {
						if (layer instanceof L.Marker)
							map.removeLayer(layer);



					});

					data.composters.forEach(composter => {
						L.marker([
							composter.latitude, composter.longitude
						], {icon: greenIcon}).bindPopup (`<b>Composteur :</b> ${
								composter.contact
						}`).addTo(map);
					});
					updateList(data.composters);
				}).catch(error => console.error('Error:', error));
			}


			function updateList(composters) {
				const listContainer = document.getElementById('composterList');
				listContainer.innerHTML = '';
				composters.forEach(composter => {
					const card = document.createElement('div');
					card.className = 'card mb-3';
					card.innerHTML = `
                <div class="card-body d-flex flex-column">
                    <h5 class="card-title">${
							composter.contact
					}</h5>
                    <h6 class="card-subtitle mb-2 text-muted">Longitude: ${
							composter.longitude
					}, Latitude: ${
							composter.latitude
					}</h6>
                    <p class="card-text"><b>Propriété :</b> ${
							composter.ownerType
					}</p>
                    <p class="card-text"><b>Accès :</b> ${
							composter.accessType
					}</p>
                    <div class="mt-auto d-flex justify-content-end">
                        <a href="https://www.google.com/maps/dir/?api=1&destination=${
							composter.latitude
					},${
							composter.longitude
					}" target="_blank" class="btn btn-primary">Itinéraire</a>
                    </div>
                </div>`;
					listContainer.appendChild(card);
				});
			}

			function getSelectedFilterIds(filterName) {
				return Array.from(document.querySelectorAll (`input[name="${filterName}"]:checked`)).map(checkbox => checkbox.value).join(',');
			}
		});
	</script>
{% endblock %}

{% block stylesheets %}
	{{ parent() }}
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
	<style>
		.card {
			border-bottom: 5px solid #0A8F44;
			display: flex;
			flex-direction: column;
			height: 100%;
		}
		.card-body {
			flex: 1;
			display: flex;
		}
		.filter-category {
			margin-bottom: 30px;
		}
		h4 {
			display: flex;
			justify-content: space-between;
		}
		.filters-title {
			margin-bottom: 20px;
		}
		.composter-list-title {
			margin-bottom: 20px;
		}
		#composterList {
			max-height: 90vh;
			overflow-y: auto;
		}
	</style>

{% endblock %}

{% block javascripts %}
	{{ parent() }}
	<script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
	<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js"></script>
	<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js" integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA==" crossorigin=""></script>
{% endblock %}
